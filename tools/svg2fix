#! /usr/bin/env phantomjs
// -*- js2 -*-

var system = require('system');
var webpage = require('webpage')
  , URL;
  ;

if (system.args.length != 2) {
  console.log('Usage: svg2fix source.svg');
  phantom.exit();
}
else {
  URL = system.args[1];
  load(URL, onload);
}

function load(url, fn) {
  var page = webpage.create();
  page.onConsoleMessage = function(msg) {
    console.log(msg);
  };
  page.open(url, function (status) {
    if (status !== 'success')
      console.log('Unable to load ' + url);
    else
      fn(page);
  });
}

function onload(page) {
  page.onConsoleMessage = function(msg) {
    console.log(msg);
    phantom.exit();
  };
  page.evaluate(onSVG);
}

function onSVG() {
  var svg = document.documentElement
    , all = [].slice.call(document.querySelectorAll('path'), 0)
    , dec = 0;
  all.forEach(convertToFixed);
  console.log((new XMLSerializer).serializeToString(svg));

  function convertToFixed(path) {
    function set(type) {
      var args = [].slice.call(arguments, 1)
        , rcmd = 'createSVGPathSeg'+ type +'Rel'
        , rseg = path[rcmd].apply(path, args);
      segs.replaceItem(rseg, i);
    }
    var coords = ['x', 'y', 'x1', 'x2', 'y1', 'y2'], segs = path.pathSegList;
    for (var x = 0, y = 0, i = 0, len = segs.numberOfItems; i < len; i++) {
      var seg = segs.getItem(i);
      coords.forEach(function(c) {
        if (c in seg) seg[c] = seg[c].toFixed(dec);
      });
    }
  }
}
